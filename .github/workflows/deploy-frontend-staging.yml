name: Deploy Frontend to Cloud Run (staging - IAM gated)
on:
  push:
    branches: [ "develop" ]
    paths:
      - "frontend/**"
      - ".github/workflows/deploy-frontend-staging.yml"
  workflow_dispatch:

concurrency:
  group: deploy-frontend-staging
  cancel-in-progress: true

env:
  PROJECT_ID: lifegeek-staging
  REGION: europe-west1
  REPO: lifegeek-app
  SERVICE_NAME: lg-frontend
  TESTER_EMAIL: "nils.schuett@gmail.com"
  IMAGE_TAG: staging

jobs:
  deploy:
    name: Build, Push, Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud via Workload Identity
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: "access_token"

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Enable required services (idempotent)
        run: |
          gcloud services enable run.googleapis.com artifactregistry.googleapis.com cloudbuild.googleapis.com

      - name: Ensure Artifact Registry repo exists (idempotent)
        run: |
          if ! gcloud artifacts repositories describe "${REPO}" --location="${REGION}" >/dev/null 2>&1; then
            gcloud artifacts repositories create "${REPO}" \
              --repository-format=docker \
              --location="${REGION}" \
              --description="LifeGeek images"
          fi

      - name: Configure Docker auth for Artifact Registry
        run: |
          gcloud auth configure-docker "${REGION}-docker.pkg.dev" --quiet

      - name: Compute image reference
        id: meta
        shell: bash
        run: |
          echo "image=${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/frontend:${IMAGE_TAG}" >> "$GITHUB_OUTPUT"

      - name: Build image
        working-directory: frontend
        run: |
          docker build -t "${{ steps.meta.outputs.image }}" .

      - name: Push image
        run: |
          docker push "${{ steps.meta.outputs.image }}"

      - name: Deploy to Cloud Run (no public access)
        run: |
          gcloud run deploy "${SERVICE_NAME}" \
            --region "${REGION}" \
            --image "${{ steps.meta.outputs.image }}" \
            --platform=managed \
            --no-allow-unauthenticated \
            --ingress=all \
            --labels app=lifegeek-ai,stage=staging,service=frontend

      - name: Grant invoker to tester email
        run: |
          gcloud run services add-iam-policy-binding "${SERVICE_NAME}" \
            --region "${REGION}" \
            --member="user:${TESTER_EMAIL}" \
            --role="roles/run.invoker"

      - name: Output service URL
        id: url
        run: |
          URL="$(gcloud run services describe "${SERVICE_NAME}" --region "${REGION}" --format='value(status.url)')" 
          echo "url=${URL}" >> "$GITHUB_OUTPUT"
          echo "Deployed URL: ${URL}"

      - name: Summary
        run: |
          echo "Deployment complete." >> $GITHUB_STEP_SUMMARY
          echo "Run URL (IAM-gated): ${{ steps.url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Access control:" >> $GITHUB_STEP_SUMMARY
          echo "- Only user '${{ env.TESTER_EMAIL }}' has Cloud Run Invoker permission." >> $GITHUB_STEP_SUMMARY
          echo "- Add more testers by granting roles/run.invoker to their Google emails." >> $GITHUB_STEP_SUMMARY
          echo "- Add more testers by granting roles/run.invoker to their Google emails." >> $GITHUB_STEP_SUMMARY

