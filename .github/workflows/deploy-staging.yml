name: Deploy Staging (Cloud Run)

on:
  workflow_dispatch:
  push:
    branches:
      - main  # Change if your deploy branch differs

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  REGION: ${{ vars.GCP_REGION }}
  DOMAIN: ${{ vars.STAGING_DOMAIN }}
  REPO_NAME: lifegeek
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    name: Build and Deploy (Staging)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (Workload Identity Federation)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'beta'

      - name: Enable required services (idempotent)
        continue-on-error: true
        run: |
          # Try to enable; if SA lacks permission, don't fail the job (preflight handles this).
          gcloud services enable run.googleapis.com artifactregistry.googleapis.com || echo "Skipping API enable (no permission). Ensure preflight script enabled APIs."

      - name: Verify required env
        run: |
          set -euo pipefail
          : "${PROJECT_ID:?missing}"; : "${REGION:?missing}"; : "${DOMAIN:?missing}"
          echo "Project: $PROJECT_ID"
          echo "Region:  $REGION"
          echo "Domain:  $DOMAIN"

      - name: Ensure Artifact Registry exists (idempotent)
        run: |
          set -euo pipefail
          REPO="${REPO_NAME}"
          REGION="${REGION}"

          # Prefer describe-or-create to avoid grep/list edge cases and treat ALREADY_EXISTS as success.
          if gcloud artifacts repositories describe "${REPO}" --location="${REGION}" >/dev/null 2>&1; then
            echo "Artifact Registry ${REPO} already exists in ${REGION}"
          else
            echo "Creating Artifact Registry ${REPO} in ${REGION}"
            gcloud artifacts repositories create "${REPO}" \
              --repository-format=docker \
              --location="${REGION}" \
              --description="LifeGeek images" || {
                status=$?
                # If creation raced and repo now exists, continue successfully.
                if gcloud artifacts repositories describe "${REPO}" --location="${REGION}" >/dev/null 2>&1; then
                  echo "Repo ${REPO} now present after create attempt; continuing."
                else
                  echo "Failed to create Artifact Registry repo ${REPO} (exit ${status})"
                  exit "${status}"
                fi
              }
          fi

      # ---------- Build images locally with Docker and push to Artifact Registry ----------
      - name: Configure Docker auth for Artifact Registry
        run: |
          gcloud auth configure-docker "${REGION}-docker.pkg.dev" --quiet

      - name: Build and Push Search Service
        run: |
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/search-service:${IMAGE_TAG}"
          docker build -f backend/services/search-service/Dockerfile -t "$IMAGE" backend/services/search-service
          docker push "$IMAGE"

      - name: Build and Push Weather Service
        run: |
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/weather-service:${IMAGE_TAG}"
          docker build -f backend/services/weather-service/Dockerfile -t "$IMAGE" backend/services/weather-service
          docker push "$IMAGE"

      - name: Build and Push Wardrobe Service
        run: |
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/wardrobe-service:${IMAGE_TAG}"
          docker build -f backend/services/wardrobe-service/Dockerfile -t "$IMAGE" backend/services/wardrobe-service
          docker push "$IMAGE"

      - name: Build and Push Fashion Service
        run: |
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/fashion-service:${IMAGE_TAG}"
          docker build -f backend/services/fashion-service/Dockerfile -t "$IMAGE" backend/services/fashion-service
          docker push "$IMAGE"

      - name: Build and Push Frontend
        run: |
          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/frontend:${IMAGE_TAG}"
          docker build -f frontend/Dockerfile -t "$IMAGE" frontend
          docker push "$IMAGE"

      # ---------- Deploy backends ----------
      - name: Deploy Search Service
        run: |
          gcloud run deploy search-service \
            --region "${REGION}" \
            --image "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/search-service:${IMAGE_TAG}" \
            --allow-unauthenticated \
            --set-secrets=EBAY_CLIENT_ID=EBAY_CLIENT_ID:latest,EBAY_CLIENT_SECRET=EBAY_CLIENT_SECRET:latest

      - name: Deploy Weather Service
        run: |
          gcloud run deploy weather-service \
            --region "${REGION}" \
            --image "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/weather-service:${IMAGE_TAG}" \
            --allow-unauthenticated \
            --set-secrets=OPENWEATHER_API_KEY=OPENWEATHER_API_KEY:latest

      - name: Deploy Wardrobe Service
        run: |
          gcloud run deploy wardrobe-service \
            --region "${REGION}" \
            --image "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/wardrobe-service:${IMAGE_TAG}" \
            --allow-unauthenticated \
            --set-secrets=CLAUDE_API_KEY=CLAUDE_API_KEY:latest

      - id: backend_urls
        name: Read Backend URLs
        run: |
          set -euo pipefail
          SEARCH_URL="$(gcloud run services describe search-service --region "${REGION}" --format='value(status.url)')"
          WEATHER_URL="$(gcloud run services describe weather-service --region "${REGION}" --format='value(status.url)')"
          WARDROBE_URL="$(gcloud run services describe wardrobe-service --region "${REGION}" --format='value(status.url)')"
          echo "search_url=${SEARCH_URL}"   >> "$GITHUB_OUTPUT"
          echo "weather_url=${WEATHER_URL}" >> "$GITHUB_OUTPUT"
          echo "wardrobe_url=${WARDROBE_URL}" >> "$GITHUB_OUTPUT"
          echo "Search:   ${SEARCH_URL}"
          echo "Weather:  ${WEATHER_URL}"
          echo "Wardrobe: ${WARDROBE_URL}"

      - name: Deploy Fashion Service (wiring backend URLs)
        run: |
          gcloud run deploy fashion-service \
            --region "${REGION}" \
            --image "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/fashion-service:${IMAGE_TAG}" \
            --allow-unauthenticated \
            --set-secrets=CLAUDE_API_KEY=CLAUDE_API_KEY:latest \
            --set-env-vars=SEARCH_SERVICE_URL=${{ steps.backend_urls.outputs.search_url }},WEATHER_SERVICE_URL=${{ steps.backend_urls.outputs.weather_url }},WARDROBE_SERVICE_URL=${{ steps.backend_urls.outputs.wardrobe_url }}

      - id: fashion_url
        name: Read Fashion URL
        run: |
          FASHION_URL="$(gcloud run services describe fashion-service --region "${REGION}" --format='value(status.url)')"
          echo "fashion_url=${FASHION_URL}" >> "$GITHUB_OUTPUT"
          echo "Fashion: ${FASHION_URL}"

      # ---------- Deploy frontend ----------
      - name: Deploy Frontend (env wiring + secrets)
        run: |
          gcloud run deploy frontend \
            --region "${REGION}" \
            --image "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/frontend:${IMAGE_TAG}" \
            --allow-unauthenticated \
            --set-env-vars=FASHION_SERVICE_URL=${{ steps.fashion_url.outputs.fashion_url }},SEARCH_SERVICE_URL=${{ steps.backend_urls.outputs.search_url }},WEATHER_SERVICE_URL=${{ steps.backend_urls.outputs.weather_url }},WARDROBE_SERVICE_URL=${{ steps.backend_urls.outputs.wardrobe_url }},NEXT_PUBLIC_SITE_URL=https://${DOMAIN} \
            --set-secrets=CLAUDE_API_KEY=CLAUDE_API_KEY:latest,EBAY_CLIENT_ID=EBAY_CLIENT_ID:latest,EBAY_CLIENT_SECRET=EBAY_CLIENT_SECRET:latest

      - id: frontend_url
        name: Read Frontend URL
        run: |
          FRONTEND_URL="$(gcloud run services describe frontend --region "${REGION}" --format='value(status.url)')"
          echo "frontend_url=${FRONTEND_URL}" >> "$GITHUB_OUTPUT"
          echo "Frontend (Cloud Run URL): ${FRONTEND_URL}"

      - name: Summary
        run: |
          echo "----------------------------------------------------"
          echo "Cloud Run URLs:"
          echo "  Search:   ${{ steps.backend_urls.outputs.search_url }}"
          echo "  Weather:  ${{ steps.backend_urls.outputs.weather_url }}"
          echo "  Wardrobe: ${{ steps.backend_urls.outputs.wardrobe_url }}"
          echo "  Fashion:  ${{ steps.fashion_url.outputs.fashion_url }}"
          echo "  Frontend (service URL): ${{ steps.frontend_url.outputs.frontend_url }}"
          echo "Front door (IAP/LB): https://${DOMAIN}"
          echo "----------------------------------------------------"